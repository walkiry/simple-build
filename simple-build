#!/bin/sh

RED="\e[31m"
RESET="\e[0m"
GREEN="\e[92m"
YELLOW="\e[93m"

scriptpath="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
build_path="./build"
log_path="./log-sb"
OSTYPE=$(uname)
cmake_subproject_list=
LR="\n"

getOS()
{
	local _retval="$1"
	local result=""
	case "$OSTYPE" in
		MINGW64_NT*)
			result="win"
			;;
		cygwin)
			result="win"
			;;
		darwin*)
			result="mac"
			;;
		Linux*) 
			result="linux"
			echo "Linux"
			;;
		linux-gnu*)
			# We have to check for WSL
			if [[ `uname -r` == *"Microsoft"* ]]; then
				result="win"
			else
				result="linux"
			fi
			;;
		*)
			echo "ERROR: Unknown OSTYPE: $OSTYPE"
			exit 127
			;;
	esac

	eval $_retval="'${result}'"
}

# Returns 0 if running OS is windows
check_is_windows()
{
	local osName
	getOS osName

	if [ "$osName" = "win" ]; then
		return 0
	fi

	return 1
}	

# Returns 0 if running OS is mac
check_is_mac()
{
	local osName
	getOS osName
	if [ "$osName" = "mac" ]; then
		return 0
	fi

	return 1
}

# Returns 0 if running OS is linux
check_is_linux()
{
	local osName
	getOS osName
	if [ $osName = "linux" ]; then
		return 0
	fi

	return 1
}

check_os_compatible()
{
	if [ is_mac -eq 0 ]; then
		printf "${RED}Mac was not tested ${RESET}${LR}"
		exit 255
	fi
}


tarball_retrieve()
{
	if [ $# -lt 3 ]; then
		printf "${RED}Not enought param ${RESET}${LR}"
		return	
	fi

	if [ -e $2 ]; then
		rm -rf $2
	fi

	if [ ! -e archives ]; then
		mkdir archives
	fi

	curl -L $1 -o archives/${3} 

	if [ $? -ne 0 ]; then
		printf "${RED} Address not found ${1} ${RESET}${LR}"
		return
	fi

	tar -xvf archives/${3} -C $build_path

	cd $2
	if [ $? -eq 0 ]; then
		touch .stamp_downloaded
	fi

	cd - 
}

git_retrieve()
{
	if [ $# -lt 3 ]; then
		printf "${RED}Not enought param ${RESET}${LR}"
		return	
	fi

	if [ -e $2 ]; then
		rm -rf $2
	fi

	git clone $1 $2

	if [ $? -ne 0 ]; then
		printf "${LR}${RED}===> Cloning source code $file ${RESET}${LR}${LR}"
		exit $?
	fi

	cd $2
	git checkout $3

	if [ $# -eq 4 ]; then
		if [ $4 -eq 1 ]; then  
			git submodule init
			git submodule update
		fi
	fi

	if [ $? -eq 0 ]; then
		touch .stamp_downloaded
	fi

	cd -
}

autotoolized_src()
{
	local src_dir=${1}
	shift
	local fname=${1}
	shift
	local src_files=$@

	if [ -e ${src_dir}/.stamp_autoolized ]; then
		return
	fi

	./autotoolize ${src_dir} ${fname} ${src_files}

	if [ $? -eq 0 ]; then
		touch ${src_dir}/.stamp_autoolized
	fi
}

apply_patches()
{
	local src_dir=${1}
	shift
	local file=${1}
	shift
	local filename=${1}
	shift
	local moderetrieved=${1}
	shift
	patche_files=$@

	echo "Patched ${patche_files}"
	patch_folder=$(dirname ${scriptpath}/${file})

	if [ -e ${src_dir}/.stamp_patched ]; then
		return
	fi
	
	cd $src_dir
	for i in ${patche_files}; do
		echo  "Applying patch $i"
		echo $ ${patch_folder}/${i}
		if [ "$moderetrieved" = "git" ]; then
 			git apply -p1 <  ${patch_folder}/${i}
		else
 			patch -p1 <  ${patch_folder}/${i}
		fi
	done

	if [ $? -ne 0 ]; then
	       printf "${RED} ${file}: ${filename}_applying_patch did not succeed${RESET}${LR}"
	else 
		touch ./.stamp_patched
        fi

	cd -
}

recipes=$(find ./packages -maxdepth 2 -iname "*.sb")
for arg in "$@"; do
	shift
		case "$arg" in
		"--install") PREFIX_INSTALL_PATH="$1";;
		"--prefix-path") PREFIX_PATH="$1" ;;
		*)
	esac
done

if [ ! -e $log_path ];then
	mkdir -p $log_path
fi

if [ ! -e $build_path ];then
	mkdir -p $build_path
fi

export PATH=${PREFIX_PATH}/bin:$PATH

pos_graph=1
pos_file="${log_path}/pos_graph.info"
if [ -e  $pos_file ]; then
	rm $pos_file
fi

map_deps=""
#establish count, it's easier than file path
for file in $recipes 
do
	map_deps="${map_deps}${pos_graph};${file}${LR}"
	pos_graph=$((pos_graph+1))
done

echo "${map_deps}" > $pos_file

map_deps_file="${log_path}/map_deps.info"
if [ -e  $map_deps_file ]; then
	rm $map_deps_file
fi

dependency_graph_lines=""
recipes_ordered=""
#read the dependencies

for file in $recipes 
do
	. ${file}
	filename="${file##*/}"
	filename="${filename%.*}"

	deps=$(eval echo \$"${filename}_dependencies")
	file_depending=$(grep "${file}" $pos_file | cut -d";" -f1)
	if [ -z $deps ]; then
		recipes_ordered="${recipes_ordered}${file} " 
		continue
	fi

	dependency_graph_lines="${dependency_graph_lines}${file_depending} "
	for dep in $deps
	do
		file_dependency=$(grep "${dep}" $pos_file | cut -d";" -f1)
		dependency_graph_lines="${dependency_graph_lines}${file_dependency} "
	done
	dependency_graph_lines="${dependency_graph_lines}${LR}"
done

echo "${dependency_graph_lines}" > $map_deps_file
sorted_file_with_dependied="${log_path}/sorted_files_with_dpendencies.info"
tsort < $map_deps_file > "${sorted_file_with_dependied}"

if [ $? -ne 0 ]; then
	printf "${YELLOW} Issue with finding dependencies, this happens when running on windows${RESET}${LR}"
	recipes_ordered=${recipes}
else
	ordered_dependencies=$(tac "${sorted_file_with_dependied}")
	# look for filename form the sorted list
	for dependancy in $ordered_dependencies
	do
		filename_dependancy=$(grep "${dependancy}" $pos_file | cut -d";" -f2)
		result=$(echo $recipes_ordered | grep $filename_dependancy)
		if [ -z "${result}" ]; then
			recipes_ordered="${recipes_ordered}${filename_dependancy} " 
		fi
	done
fi

echo "${recipes_ordered}" > "${log_path}/ordered_build.info"
ordered_list=$(eval echo "${recipes_ordered}")
for file in $ordered_list
do
	echo "Opening file $file"
	. ${file}
	filename="${file##*/}"
	filename="${filename%.*}"

# Type could be git ot taball
	typepackage="git"
	printf "${LR}${GREEN}===> Autotool packet $file ${RESET}${LR}${LR}"

	git_addr=$(eval echo \$"${filename}_git")
	if [ -z $git_addr ]; then
	       printf "Trying tarballs${LR}"

		tarball_addr=$(eval echo \$"${filename}_tarball_site")
		if [ -z $tarball_addr ]; then
		       printf "${RED} In ${file}: ${filename}_tarball_site var does not exits ${RESET}${LR}"
		       printf "${RED} In ${file}: ${filename}_git var does not exits ${RESET}${LR}"
		       continue
		fi

		tarball_name=$(eval echo \$"${filename}_tarball_name")
		if [ -z $tarball_addr ]; then
		       printf "${RED} In ${file}: ${filename}_tarball_name var does not exits ${RESET}${LR}"
		       continue
		fi

		typepackage="tarball"
	else
		git_version=$(eval echo \$"${filename}_version")
		if [ -z $git_version ]; then
		       printf "${RED}In ${file}: ${filename}_version does not exits ${RESET}${LR}"
		       continue
		fi

		git_recursive=$(eval echo \$"${filename}_git_recursive")
		if [ -z $git_recursive ]; then
		       printf "${RED}In ${file}: ${filename}_git_recursive assuming recursive ${RESET}${LR}"
		fi
	fi

	src_dirs=$(eval echo \$"${filename}_src_dir")
	if [ -z $src_dirs ]; then
	       printf "${RED} In ${file}: ${filename}_src_dir does not exits ${RESET}${LR}"
	       continue
	fi

	# Do no create a mess store it somewhere else than the root
	src_dirs="${build_path}/${src_dirs}"
	build_cmd=$(eval echo \$"${filename}_build_cmd")
	if [ -z "$build_cmd" ]; then
	       printf "${RED}In ${file}: ${filename}_build_cmd does not exits ${RESET}${LR}"
	       continue
        fi



	if [ ! -e $src_dirs/.stamp_downloaded ]; then
		case "$typepackage" in
			"git")
				git_retrieve $git_addr $src_dirs $git_version $git_recursive
				;;
			"tarball")
				tarball_retrieve $tarball_addr $src_dirs $tarball_name
				;;
			*)
	       			printf "${RED}In ${file}: ${filename} Not a valid type package"
				continue
				;;
		esac
	else 
		printf "${YELLOW} ${file}: Already got sources. " 
		printf	"If you want to redownload it delete .stamp_download${RESET}${LR}"
	fi

	check_is_windows
	if [ $? -eq 0 ]; then
		windows_compat=$(eval echo \$"${filename}_windows_compat")
		if [ ! -z $windows_compat ]; then
			printf "${GREEN}Adding ${src_dirs} to the cmakefile ${RESET}${LR}"
			if [ $windows_compat -eq 1 ]; then
				cmake_subproject_list="${cmake_subproject_list}${LR}add_subdirectory(${src_dirs})"
			fi
		fi
	fi

	if [ -e $src_dirs/.stamp_built ]; then
		printf "${YELLOW} ${file}: Already got sources. " 
		printf	"If you want to rebuild it delete .stamp_built${RESET}${LR}"
		continue
	fi

	# Assuming linux otherwise
	autotoolize_cmd=$(eval echo \$"${filename}_need_autotoolize")
	if [ ! -z $autotoolize_cmd ]; then
		if [ $autotoolize_cmd -eq 1 ]; then
			autotoolize_src_files=$(eval echo \$"${filename}_source_files")
			autotoolized_src  $src_dir $filename $autotoolize_src_files
		fi
	fi

	list_patches=$(eval echo \$"${filename}_patches")
	echo "List of patches ${list_patches}"
	if [ ! -z "${list_patches}" ]; then
		apply_patches $src_dirs $file $filename $typepackage ${list_patches} 
	fi

	cd ${src_dirs}

	check_is_linux
	if [ $? -eq 0 ]; then
		echo "Running ${build_cmd}"
		sh -c "eval ${build_cmd}"
		if [ $? -ne 0 ]; then
		       printf "${RED} ${file}: ${filename}_build_cmd did not succeed${RESET}${LR}"
		       exit 255
		fi
	fi

	touch .stamp_built
	cd -
done

check_is_windows
if [ $? -eq 0 ]; then
	echo -e "FOUND vars ${cmake_subproject_list}"
	echo -e ${cmake_subproject_list} > CMakeLists.txt
fi

printf "${LR}******Done getting packets******${LR}"

